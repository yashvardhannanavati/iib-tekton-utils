---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: iib-image-builder-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, konflux
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: docker
spec:
  description: |-
    This task builds source code into multi-architecture index images using Python orchestration
    with buildah.
  params:
    - name: COMMIT_SHA
      description: The image is built from this commit.
      type: string
      default: ""
    - name: CONTEXT
      description: Path to the directory to use as context.
      type: string
      default: .
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      type: string
      default: ./Dockerfile
    - name: IMAGE
      description: Reference of the image buildah will produce.
      type: string
    - name: LABELS
      description: Additional key=value labels that should be applied to the image
      type: string
      default: ""
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with the application source code.
      type: string
    - name: STORAGE_DRIVER
      description: Storage driver to configure for buildah
      type: string
      default: overlay
    - name: PLATFORMS
      description: Comma-separated list of platforms to build for (e.g., amd64,arm64,ppc64le,s390x)
      type: string
      default: "amd64,arm64,ppc64le,s390x"
    - name: OPM_VERSION
      description: OPM version to use for cache generation
      type: string
      default: "v1.40.0"
    - name: caTrustConfigMapKey
      description: The name of the key in the ConfigMap that contains the CA bundle data.
      type: string
      default: ca-bundle.crt
    - name: caTrustConfigMapName
      description: The name of the ConfigMap to read CA bundle data from.
      type: string
      default: trusted-ca
  results:
    - name: IMAGE_DIGEST
      description: Digest of the multi-arch image manifest
    - name: IMAGE_REF
      description: Image reference of the built multi-arch image
    - name: IMAGE_URL
      description: Image repository and tag where the built image was pushed
  volumes:
    - name: shared
      emptyDir: {}
    - name: trusted-ca
      configMap:
        items:
          - key: $(params.caTrustConfigMapKey)
            path: ca-bundle.crt
        name: $(params.caTrustConfigMapName)
        optional: true
    - name: varlibcontainers
      emptyDir: {}
    - name: workdir
      emptyDir: {}
    - name: cache
      emptyDir: {}
  stepTemplate:
    computeResources:
      limits:
        memory: 16Gi
      requests:
        cpu: "4"
        memory: 4Gi
    env:
      - name: COMMIT_SHA
        value: $(params.COMMIT_SHA)
      - name: CONTEXT
        value: $(params.CONTEXT)
      - name: DOCKERFILE
        value: $(params.DOCKERFILE)
      - name: IMAGE
        value: $(params.IMAGE)
      - name: LABELS
        value: $(params.LABELS)
      - name: STORAGE_DRIVER
        value: $(params.STORAGE_DRIVER)
      - name: PLATFORMS
        value: $(params.PLATFORMS)
      - name: OPM_VERSION
        value: $(params.OPM_VERSION)
      - name: CACHE_DIR
        value: /var/workdir/cache
    volumeMounts:
      - mountPath: /shared
        name: shared
      - mountPath: /var/workdir
        name: workdir
      - mountPath: /var/workdir/cache
        name: cache
  steps:
    - name: use-trusted-artifact
      image: quay.io/konflux-ci/build-trusted-artifacts:latest@sha256:edd8e3affc389320b15b9de8a5aedbf7b0463211b77c981563a2cfa20076b0c0
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
      volumeMounts:
        - mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
          name: trusted-ca
          readOnly: true
          subPath: ca-bundle.crt
    - name: build-multi-arch
      image: quay.io/exd-guild-hello-operator/iib-build-task:latest
      workingDir: /var/workdir
      script: |
        #!/bin/bash
        set -euo pipefail

        echo "Labels: $LABELS"
        echo "OPM Version: $OPM_VERSION"
        echo "Platforms: $PLATFORMS"

        echo "[$(date --utc -Ins)] Starting multi-architecture build with Python orchestration"

        # Run the Python build script
        python3 -u /usr/local/bin/multi-arch-builder.py \
          --ca-bundle /mnt/trusted-ca/ca-bundle.crt \
          --output /var/workdir/build-results.json

        # Extract results for Tekton
        if [ -f "/var/workdir/build-results.json" ]; then
          # Extract digest
          jq -r '.digest' /var/workdir/build-results.json > $(results.IMAGE_DIGEST.path)

          # Extract image URL
          jq -r '.image_name' /var/workdir/build-results.json > $(results.IMAGE_URL.path)

          # Create image reference
          IMAGE_NAME=$(jq -r '.image_name' /var/workdir/build-results.json)
          DIGEST=$(jq -r '.digest' /var/workdir/build-results.json)
          echo "${IMAGE_NAME}@${DIGEST}" > $(results.IMAGE_REF.path)

          # Log build summary
          echo "=== Build Summary ==="
          echo "Image: $IMAGE_NAME"
          echo "Digest: $DIGEST"
          echo "Platforms: $(jq -r '.platforms | join(", ")' /var/workdir/build-results.json)"
          echo "OPM Version: $(jq -r '.opm_version' /var/workdir/build-results.json)"
        fi

        echo "[$(date --utc -Ins)] Multi-architecture build completed"
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /mnt/trusted-ca
          name: trusted-ca
          readOnly: true
      securityContext:
        capabilities:
          add:
            - SETFCAP
        runAsUser: 0
